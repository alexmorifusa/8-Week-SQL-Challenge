CASE STUDY #1 DANNY’s DINER
1. What is the total amount each customer spent at the restaurant?
  





customer_id
	Total
	A
	76
	B
	74
	C
	36
	

2. How many days has each customer visited the restaurant?


  





customer_id
	Visits
	A
	4
	B
	6
	C
	2
	



1. What was the first item from the menu purchased by each customer?
At first I had no clue how to solve this problem, I skipped ahead and learned to solve a similar problem for problem 5. (Explained DENSE_RANK() and ORDER( PARTITION BY…) in #5)
  

First_item ranks order_date of each customer by ASC order (from first to most recent order). The second SELECT statement retrieves the customer_id and product_name for the dates of each customer where the rank is 1 (first date).
2. What is the most purchased item on the menu and how many times was it purchased by all customers?
  

To only return the most purchased item add:
  

Results:
product_name
	purchased
	ramen
	8
	

3. Which item was the most popular for each customer?  
Sorts all customer orders and the product name of their order under customer_id but returns all product orders not just the most ordered product per customer.
Output of the code above:
customer_id
	product_name
	order_count
	A
	ramen
	3
	A
	curry
	2
	A
	sushi
	1
	B
	curry
	2
	B
	sushi
	2
	B
	ramen
	2
	C
	ramen
	3
	I needed to figure out a way to only return the most ordered product and also a way to output multiple most ordered products if there is a tie (like customer B).




  

WITH clause to create a temporary table of most_ordered.
DENSE_RANK()
Returns the rank of each row starting with 1.
Output without PARTITION BY sales.customer_id
customer_id
	product_name
	order_count
	C
	ramen
	3
	A
	ramen
	3
	Output with PARTITION BY sales.customer_id
customer_id
	product_name
	order_count
	A
	ramen
	3
	B
	curry
	2
	B
	sushi
	2
	B
	ramen
	2
	C
	ramen
	3
	PARTITION BY organizes rows into different groups where DENSE_RANK() will be applied. If it is not specified, the entire set will be represented in a single group. So without the PARTITION BY statement, only A and C are seen in the result because they have the highest rank of 3 for most orders and B has a three way tie for 2.
To find the most ordered product for each customer, I implemented the DENSE_RANK() function to find the rank and ORDER (PARTITION BY…) statement to rank each product order differently between customer_ids.
   4. Which item was purchased first by the customer after they became a member?
  

First time utilizing the member table. To focus on only the orders after each customer became a member I implemented sales.order_date > members.join_date after inner joining the members and sales table. Beside that, I followed the same DENSE_RANK() and OVER(PARTITION BY…) format as #5 and got the output below.
 customer_id
	product_name
	A
	ramen
	B
	sushi
	

   5. Which item was purchased just before the customer became a member?
This question is similar to the question before, but they ask for the order before each customer becomes a member. I changed the first ORDER BY statement to DESC by sales.order_date but I kept on getting 2 final orders for customer A. Since I only needed their one final order, I had to switch the DENSE_RANK() function to ROW_NUMBER() function which simply returns the row in any order starting with 1. No row can have the same value unlike rank where there can be multiple.  


customer_id
	product_name
	A
	sushi
	B
	sushi
	

   6. What is the total items and amount spent for each member before they became a member?
Since customer_id = C is not a member, we will only calculate this for A and B.   
I used 2 inner joins for this question. One inner join is the exact same as the previous one where I filtered out everything after each customer became a member. The second inner join joins the sales and menu table to make the calculations for total items and amount spent possible. To calculate the total items I used the COUNT function and to calculate the amount spent I used the SUM function. 


customer_id
	total_items
	total_cost
	A
	2
	25
	B
	3
	40
	

   7. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
  

I created a point calculator as seen in the WITH statement where they find the specific case to have double points when a customer buys sushi. END signifies the end of the case and we can alias the calculations AS points. From there I simply selected and sorted the points for each customer.


customer_id
	total_points
	A
	860
	B
	940
	C
	360
	

   8. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
Here we build on our previous program by implementing extra calculations for when customers join the program. Customers get double points for a week after they joined the program. So after calculating double points for sushi like before, I added another WHEN clause where I check if sales.order_date is between the join_date and a week after that where they would earn double points. I also added an AND statement to check if the order_dates were in the month of January by filtering in only the dates on or before ‘2021-01-31’. 
  

customer_id
	total_points
	A
	1370
	B
	820
	

Thoughts after finishing case study #1.